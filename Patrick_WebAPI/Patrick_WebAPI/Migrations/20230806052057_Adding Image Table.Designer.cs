// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Patrick_WebAPI.Data;

#nullable disable

namespace Patrick_WebAPI.Migrations
{
    [DbContext(typeof(NZWalksDbContext))]
    [Migration("20230806052057_Adding Image Table")]
    partial class AddingImageTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Patrick_WebAPI.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be387e06-4035-4ef6-83a2-61616d27987c"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("cb1e165d-6282-444e-a832-23e089fef7d4"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("c68a28a2-fa36-49eb-8b36-cffa28d8c1f1"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("Patrick_WebAPI.Models.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Patrick_WebAPI.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6c0aa6d-02a7-4f76-8546-daf0614b4b2e"),
                            Code = "VNS",
                            Name = "Varansi",
                            RegionImageUrl = "image-vns.jpg"
                        },
                        new
                        {
                            Id = new Guid("e11ed2f1-4b20-49eb-8b52-7b1fcf259b5a"),
                            Code = "DEL",
                            Name = "Delhi",
                            RegionImageUrl = "image-del.jpg"
                        },
                        new
                        {
                            Id = new Guid("b74a307d-9bca-4f6d-8cba-78e97b5aca8c"),
                            Code = "CHEN",
                            Name = "Chennai",
                            RegionImageUrl = "image-Chennai.jpg"
                        },
                        new
                        {
                            Id = new Guid("e1b0d45a-107b-456c-9339-19efcb27ad1f"),
                            Code = "HYD",
                            Name = "Hydarabad",
                            RegionImageUrl = "image-hyd.jpg"
                        },
                        new
                        {
                            Id = new Guid("fc327605-b0e3-48aa-903e-3535536b08e9"),
                            Code = "MUM",
                            Name = "Mumbai",
                            RegionImageUrl = "image-mum.jpg"
                        },
                        new
                        {
                            Id = new Guid("a5393b9f-2b9e-4b22-ad28-d27b7fc024b8"),
                            Code = "GUM",
                            Name = "Gurugram",
                            RegionImageUrl = "image-Gurugram.jpg"
                        });
                });

            modelBuilder.Entity("Patrick_WebAPI.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");

                    b.HasData(
                        new
                        {
                            ID = new Guid("4e752299-0451-4070-b229-511318eb29e8"),
                            Description = "this is dummy Walk",
                            DifficultyId = new Guid("da2bf721-fe71-45e9-b4ea-4469cf877a1d"),
                            LengthInKm = 1.0,
                            Name = "Dummmy-Walk",
                            RegionId = new Guid("a2d6b4f0-71cf-4507-93f5-efcec2c90116"),
                            WalkImageUrl = "Imge-dummy.jpg"
                        });
                });

            modelBuilder.Entity("Patrick_WebAPI.Models.Domain.Walk", b =>
                {
                    b.HasOne("Patrick_WebAPI.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patrick_WebAPI.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
